// src: https://www.youtube.com/watch?v=4HuAnM6b2d8&t=83s
//------------------------------------------------------------------------------
// USER DATA
//------------------------------------------------------------------------------

// create the html for the users info
var userInfo = "<p>User name is {{name}}, user address is {{street}} in {{city}}, {{state}}</p>";

// create the output
// joins the javascript data with the html
var template = Handlebars.compile(userInfo);

// create the data
// define output in an object
var data = template({
  name : "Adrian",
  street : "123 main street",
  city : "bronx",
  state : "NY"
})
// place data inside of html
// adds all data generated in data object
document.getElementById("mainData").innerHTML += data;






//------------------------------------------------------------------------------
// QUOTE TEMPLATE
//------------------------------------------------------------------------------

// grab the handlebars quote-template - ordered list
var quoteInfo = document.getElementById("quote-template").innerHTML;

// compile or join the data thats generated by the javascript to the html
var template = Handlebars.compile(quoteInfo);

// custom helper function
// works with data from the template
// to use a helper function, you must register it with handlebars
// use this method of creating custom helpers to avoid code injection issues
// helpers must be defined before the template
Handlebars.registerHelper("makeLink", function(text, url){
  // escape the path string so that it is safe to use in the content area
  text = Handlebars.Utils.escapeExpression(text);
  url = Handlebars.Utils.escapeExpression(url);

  // generate a custom link
  var customLink = "<a href='" + url + "'>" + text + "</a>";

  // pass back the finished link
  // safe string prevents the string from being escaped - no triple stashes
  return new Handlebars.SafeString(customLink);
});

// creating a changeColor registered helper
Handlebars.registerHelper("changeColor", function(text, options){
  // escape the path string so that it is safe to use in the content area
  text = Handlebars.Utils.escapeExpression(text);

  // access color attributes by name
  // change styles dynamically
  if(options.hash.color === "red"){
    return new Handlebars.SafeString("<span class='redText'>" + text + "</span>");
  }else if(options.hash.color === "blue"){
    return new Handlebars.SafeString("<span class='blueText'>" + text + "</span>");
  }else{
    return new Handlebars.SafeString("<span class='greenText'>" + text + "</span>");
  }

});

// creating custom helpers with the ability to add attributes using options
// this info will be added to the template when called in the template.
// it will be shared with all helpers
Handlebars.registerHelper("sayHello", function(options){
  // print out different info dpending on the values stored in options
  // the data is going to be a language that will be defined
  switch(options.data.lang){
    case "spanish": return "Hola";
      break;

    case "french": return "Bonjour";
      break;

    case "german": return "Hallo";
      break;

    default: return "Hello";
  }
})

// create an array of the data
// define all the pieces of data to be passed
var quoteData = template({
  athlete : "Yogi Berra",
  quotes : [ // define all the quotes in an array of objects for the ordered list in the html
    {
      quote : "Zombie ipsum reversus ab viral inferno, nam rick grimes malum cerebro. De carne lumbering animata corpora quaeritis."
    },
    {
      quote : "Zombie ipsum reversus ab viral inferno, nam rick grimes malum cerebro. De carne lumbering animata corpora quaeritis."
    },
    {
      quote : "Zombie ipsum reversus ab viral inferno, nam rick grimes malum cerebro. De carne lumbering animata corpora quaeritis."
    },
    {
      quote : "Zombie ipsum reversus ab viral inferno, nam rick grimes malum cerebro. De carne lumbering animata corpora quaeritis."
    }
  ],
  athleteBio : "<i>Zombie ipsum reversus ab viral inferno, nam rick grimes malum cerebro. De carne lumbering animata corpora quaeritis. Zombie ipsum reversus ab viral inferno, nam rick grimes malum cerebro. De carne lumbering animata corpora quaeritis. Zombie ipsum reversus ab viral inferno, nam rick grimes malum cerebro. De carne lumbering animata corpora quaeritis. Zombie ipsum reversus ab viral inferno, nam rick grimes malum cerebro. De carne lumbering animata corpora quaeritis. Zombie ipsum reversus ab viral inferno, nam rick grimes malum cerebro. De carne lumbering animata corpora quaeritis.</i>"
},
// change language
{
  data : {
    lang : "german"
  }
});

// place quoteInfo data inside of quoteData div in the html
document.getElementById("quoteData").innerHTML += quoteData;





//------------------------------------------------------------------------------
// BLOCK HELPER TEMPLATE
//------------------------------------------------------------------------------

var templateInfo = document.getElementById("blockHelperTemplate").innerHTML;


// compile or join the data thats generated by the javascript to the html
var template = Handlebars.compile(templateInfo);




// register the helpers
// name argument will be associated with the #makeRadio buttons name
Handlebars.registerHelper("makeRadio", function(name, options){
  // return a string
  // save it in radioList
  // based off of the data thats passed inside of makeRadio helper
  var radioList = options.fn();

  radioList = radioList.trim().split("\n");

  // this output contains the radio buttons
  var output = "";

  // cycle through the radioList items
  for(var val in radioList){
    var item = radioList[val].trim();
    output += "<input type='radio' name='" + name + "'value='" + item + "'>" + item + "<br/>";
  }

  return output;
});

// a template of data to pass into the radioList
var templateData = template({});

document.getElementById("radioData").innerHTML += templateData;
